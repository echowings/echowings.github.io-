[{"content":"How to install kubernetes on ubuntu 20.04 Kubernetes is new linux os at nowadays. This is manually install kubernetes on ubuntu 20.04 with kubeadm. I have 3 proxmox ve servers. then I plan to install 3 ubuntu virtual machines on eache proxmox ve server.\nNo. Name OS IP ADDRESS 01 ubuntu-k8s-master ubuntu 20.04 LTS 192.168.11.71 02 ubuntu-k8s-node01 ubuntu 20.04 LTS 192.168.11.72 03 ubuntu-k8s-node02 ubuntu 20.04 LTS 192.168.11.73 Here is my plan to install kubernetes:\nCreate ubuntu 20.04 cloud image on 3 proxmox ve server Delpy 3 ubuntu 20.04 virtual machines on each 3 proxmox ve server.(1 for kubernetes master node, other 2 for kubernetes work nodes) Install kubeadm,kubelet,kubectl,containerd on each nodes(include master node and worker nodes) Initalize Kubernetes on master node and install calico network CNI Let worker nodes join kubernets cluster. Provision 3 ubuntu server on 3 proxmox ve nodes Create ubuntu 20.04 template on 3 proxmox ve nodes Run following command on eache proxmox ve server to create ubuntu 20.04 server template with cloudinit enabled.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 cat \u0026lt;\u0026lt; \u0026#39;EOF\u0026#39; | tee create_ubuntu_20.04_template.sh #!/bin/bash VMID=9003 IMAGE_NAME=\u0026#34;focal-server-cloudimg-amd64.img\u0026#34; VM_NAME=\u0026#34;ubuntu-20.04TLS-template\u0026#34; STORAGE=\u0026#34;SSD\u0026#34; STORAGE_FULL_PATH=\u0026#34;/mnt/pve\u0026#34; VCPUS=4 VM_MEMORY=4096 #STORAGE_FULL_PATH=\u0026#34;/var/lib/vz\u0026#34; # Download ubuntu 20.04 LTS cloud image [ ! -f /var/lib/vz/template/qcow/focal-server-cloudimg-amd64.img ] \u0026amp;\u0026amp; curl -fsSL https://cloud-images.ubuntu.com/focal/current/focal-server-cloudimg-amd64.img -o /var/lib/vz/template/qcow/focal-server-cloudimg-amd64.img qm create $VMID --name ${VM_NAME} \\ --memory ${VM_MEMORY} \\ --net0 virtio,bridge=vmbr0 \\ --cores ${VCPUS} \\ --sockets 1 \\ --cpu cputype=host \\ --description \u0026#34;${VM_NAME}\u0026#34; \\ --kvm 1 \\ --machine q35 qm importdisk $VMID /var/lib/vz/template/qcow/${IMAGE_NAME} ${STORAGE} qm set $VMID --scsihw virtio-scsi-pci --virtio0 ${STORAGE}:${VMID}/vm-$VMID-disk-0.raw qm set $VMID --serial0 socket qm set $VMID --boot c --bootdisk virtio0 qm set $VMID --agent 1 qm set $VMID --hotplug disk,network,usb qm set $VMID --vcpus ${VCPUS} qm set $VMID --vga qxl qm set $VMID --name ${VM_NAME} qm set $VMID --ide2 ${STORAGE}:cloudinit qm set $VMID --serial0 socket --vga serial0 qm set $VMID --sshkey /etc/pve/pub_keys/pub_key.pub qm set $VMID --ciuser ubuntu qm set $VMID --cipassword xA123456 qm set $VMID --ipconfig0 ip=dhcp qm resize $VMID virtio0 +50G qemu-img convert -f raw ${STORAGE_FULL_PATH}/${STORAGE}/images/$VMID/vm-$VMID-disk-0.raw -O qcow2 ${STORAGE_FULL_PATH}/${STORAGE}/images/$VMID/vm-$VMID-disk-0.qcow2 sed -i \u0026#39;s/.raw/.qcow2/g\u0026#39; /etc/pve/qemu-server/${VMID}.conf rm -rf ${STORAGE_FULL_PATH}/${STORAGE}/images/${VMID}/*.raw qm set $VMID --template EOF Run the command on proxmxo ve server to create ubuntu server 20.04 template 1 2 # Run script to create ubuntu 20.04 template bash create_ubuntu_20.04_template.sh Create 3 kubernetes nodes from template Create ubuntu server 20.04 as kubernetes nodes from template\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 # Run commands on proxmox ve server 01 qm clone 9003 113 --full --name ubuntu-k8s-master qm set 113 --ipconfig0 ip=192.168.11.71/24,gw=192.168.11.1 qm set 113 --onboot 1 # Run commands on proxmox ve server 02 qm clone 9003 113 --full --name ubuntu-k8s-node01 qm set 113 --ipconfig0 ip=192.168.11.72/24,gw=192.168.11.1 qm set 113 --onboot 1 # Run commands on proxmox ve server 03 qm clone 9003 113 --full --name ubuntu-k8s-node02 qm set 113 --ipconfig0 ip=192.168.11.73/24,gw=192.168.11.1 qm set 113 --onboot 1 Install Prerequest packects Change ubuntu sourcelist and update OS then reboot it if necessary. Change ubuntu sourcelist and update packages\n1 2 3 4 5 6 7 source /etc/os-release echo $VERSION_CODENAME [ ! -f /etc/apt/sources.list.bak ] \u0026amp;\u0026amp;mv /etc/apt/sources.list{,.bak} [ ! -f /etc/apt/sources.list ] \u0026amp;\u0026amp;curl -fsSL https://mirrors.ustc.edu.cn/repogen/conf/ubuntu-https-4-${VERSION_CODENAME} -o /etc/apt/sources.list sudo apt-get update sudo apt -y full-upgrade [ -f /var/run/reboot-requried ] \u0026amp;\u0026amp; sudo reboot -f Forwarding IPv4 and letting iptables see bridged traffic 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 cat \u0026lt;\u0026lt;EOF | sudo tee /etc/modules-load.d/kubernetes.conf overlay br_netfilter EOF sudo modprobe overlay sudo modprobe br_netfilter # sysctl params required by setup, params persist across reboots cat \u0026lt;\u0026lt;EOF | sudo tee /etc/sysctl.d/kubernetes.conf net.bridge.bridge-nf-call-iptables = 1 net.bridge.bridge-nf-call-ip6tables = 1 net.ipv4.ip_forward = 1 EOF # Reload sysctl sudo sysctl --system Install containerd runtime 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 sudo apt-get update #sudo apt-get install ca-certificates curl gnupg lsb-release # Install required packages sudo apt install -y curl gnupg2 software-properties-common apt-transport-https ca-certificates lsb-release # Add Docker\u0026#39;s offical GPG key sudo mkdir -p /etc/apt/keyrings [ ! -f /etc/apt/keyrings/docker.gpg ] \u0026amp;\u0026amp;curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /etc/apt/keyrings/docker.gpg [ ! -f /etc/apt/sources.list.d/docker.list ] \u0026amp;\u0026amp;echo \\ \u0026#34;deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu \\ $(lsb_release -cs) stable\u0026#34; | sudo tee /etc/apt/sources.list.d/docker.list \u0026gt; /dev/null # Install sudo apt update sudo apt install -y containerd.io Modify containerd configuration 1 2 3 4 5 6 7 8 [ ! -f /etc/containerd ] \u0026amp;\u0026amp; mkdir -p /etc/containerd sudo rm -rf /etc/containerd/config.toml sudo containerd config default | sudo tee /etc/containerd/config.toml #set plugins.cri.systemd_cgroup = true in /etc/containerd/config.toml sudo sed -i \u0026#39;s/SystemdCgroup\\ =\\ false/SystemdCgroup\\ =\\ true/g\u0026#39; /etc/containerd/config.toml sudo systemctl restart containerd sudo systemctl enable containerd Disable SWAP 1 2 3 4 5 6 # sudo sed -i \u0026#39;/swap/d\u0026#39; /etc/fstab # Search for a swap line and add # (hashtag) sign in front of the line. sudo sed -i \u0026#39;/ swap / s/^\\(.*\\)$/#\\1/g\u0026#39; /etc/fstab sudo swapoff -a sudo mount -a free -h Install kubectl，kubeadm, kubelet 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 sudo apt-get install -y ca-certificates curl apt-transport-https vim git curl wget # if you use Debian 9(stretch) or earlier you would also need to install `apt-transport-https` sudo apt-get install -y apt-transport-https # Download the Google Cloud public signing key [ ! -f /usr/share/keyrings/kubernetes-archive-keyring.gpg ]\u0026amp;\u0026amp;sudo curl -fsSLo /usr/share/keyrings/kubernetes-archive-keyring.gpg https://packages.cloud.google.com/apt/doc/apt-key.gpg # Add the kubernetes apt repository [ ! -f /etc/apt/sources.list.d/kubernetes.list ] \u0026amp;\u0026amp; echo \u0026#34;deb [signed-by=/usr/share/keyrings/kubernetes-archive-keyring.gpg] https://apt.kubernetes.io/ kubernetes-xenial main\u0026#34; | sudo tee /etc/apt/sources.list.d/kubernetes.list apt update # Chek kubeadm version for us to select the right version of kubernete to install apt-cache madison kubeadm #1.23.10-00 sudo apt-get install -y kubelet=1.23.10-00 kubeadm=1.23.10-00 kubectl=1.23.10-00 # Provent auto update new version # Hold the current version sudo apt-mark hold kubelet kubeadm kubectl # Verify whether kubectl has been successfully installed by running the following command upon the completion of the previous steps: kubectl version --client kubeadm version kubelet --version Setup master node Inital Kubernetes master node 1 2 3 4 5 6 7 sudo kubeadm config images pull kubeadm init --pod-network-cidr=10.244.0.0/16 --upload-certs mkdir -p $HOME/.kube sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config sudo chown $(id -u):$(id -g) $HOME/.kube/config Install network CNI calico on master node 1 2 3 4 5 kubectl apply -f https://docs.projectcalico.org/manifests/calico.yaml # Monitor pod status watch kubectl get pods -n calico-system kubectl get pods -n calico-system -w Option: Single kubernetes nodes to remove taint on master nodes 1 2 3 # Single node k8s #kubectl taint nodes --all node-role.kubernetes.io/master- #kubectl taint nodes --all node-role.kubernetes.io/control-plane- Option: query join command 1 2 # if you forget the join information, you can query it with commands as show below kubeadm token create --print-join-command Option: Reset nodes and try it agaion 1 2 sudo su kubeadm reset -f Setup Worker Nodes 1 2 3 4 sudo kubeadm config images pull kubeadm join 192.168.11.71:6443 --token akn012.rp0e7oxw0qn7b5o3 \\ --discovery-token-ca-cert-hash sha256:f78548da4af356ea8b006531962673b5945dd1c36588e137c6ec44c99d4ad7e1 Check Node status 1 2 kubectl get nodes kubectl get pods -A -o wide Reference Deploy metrics-server\nDeploy kubevirt\nKubernetes Kubevirt DEPLOY A KUBERNETES CLUSTER USING ANSIBLE\nInstall Kubernetes Cluster on Ubuntu 20.04 with kubeadm\n","date":"2022-11-13T18:53:31+08:00","image":"https://picsum.photos/800/600.webp?random=dddca1a9","permalink":"https://echowings.github.io/zh-cn/p/how-to-install-kubernetes-on-ubuntu-20.04-with-kubeadm/","title":"How to install kubernetes on ubuntu 20.04 with kubeadm"},{"content":"Shell Script to Update Cloudflare Ddns Script 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 #!/bin/bash ############## User Configuration ############### # Define programme path # location_path=\u0026#34;/config/scripts/ddns\u0026#34; location_path=$(dirname -- \u0026#34;$0\u0026#34;) # You Registered CloudFlare Mail Account auth_email=\u0026#34;\u0026#34; # CloudFlare Global API Key auth_key=\u0026#34;\u0026#34; # Root Doman Name zone_name=\u0026#34;\u0026#34; # IP Type，Enter \u0026#39;ipv4\u0026#39; or \u0026#39;ipv6\u0026#39; ,at here we got paramter from our input type=$1 # DDNS Domain Name record_name=$2 # WAN INTERFACE INTERFACE=\u0026#34;\u0026#34; ############# Script ############ # The before WAN IP ip_file=\u0026#34;$location_path/$1_$2_ip.txt\u0026#34; # Domain id information # Domain id information id_file=\u0026#34;$location_path/$1_$2_cloudflare.ids\u0026#34; # Log location log_file=\u0026#34;$location_path/cloudflare.log\u0026#34; ################ Don\u0026#39;t change here ############### ################## Function #################### record_type=\u0026#34;\u0026#34; ip=\u0026#34;\u0026#34; zone_identifier=\u0026#34;\u0026#34; record_identifier=\u0026#34;\u0026#34; update=\u0026#34;\u0026#34; # Log function log() { if [ \u0026#34;$1\u0026#34; ]; then echo -e \u0026#34;[$(date)] - $1\u0026#34; \u0026gt;\u0026gt; $log_file fi } #To get local IP address get_ip() { if [ $type == \u0026#34;ipv4\u0026#34; ]; then record_type=\u0026#34;A\u0026#34; ip=$(ip addr | grep ${INTERFACE} -A2 | grep inet | grep -v inet6 | awk \u0026#39;{print $2}\u0026#39;) elif [ $type == \u0026#34;ipv6\u0026#34; ]; then record_type=\u0026#34;AAAA\u0026#34; ip=$(ip addr | grep ${INTERFACE} -A2 | grep inet6 | awk \u0026#39;{print $2}\u0026#39; | cut -d \u0026#39;/\u0026#39; -f1) else echo \u0026#34;Type wrong\u0026#34; log \u0026#34;Type wrong\u0026#34; exit 0 fi } # Check IP changed or not, if there\u0026#39;s no change, then terminal programme check_ip_change() { if [ -f $ip_file ]; then old_ip=$(cat $ip_file) if [ \u0026#34;$ip\u0026#34; == \u0026#34;$old_ip\u0026#34; ]; then echo \u0026#34;IP has not changed.\u0026#34; log \u0026#34;IP has not changed.\u0026#34; exit 0 fi fi } #Get zone_id subdomain ID get_id() { if [ -f $id_file ] \u0026amp;\u0026amp; [ $(wc -l $id_file | cut -d \u0026#34; \u0026#34; -f 1) == 2 ]; then zone_identifier=$(head -1 $id_file) record_identifier=$(tail -1 $id_file) else zone_identifier=$(curl -s -X GET \u0026#34;https://api.cloudflare.com/client/v4/zones?name=$zone_name\u0026#34; -H \u0026#34;X-Auth-Email: $auth_email\u0026#34; -H \u0026#34;X-Auth-Key: $auth_key\u0026#34; -H \u0026#34;Content-Type: application/json\u0026#34; | grep -Po \u0026#39;(?\u0026lt;=\u0026#34;id\u0026#34;:\u0026#34;)[^\u0026#34;]*\u0026#39; | head -1 ) rec_response_json=`curl -X GET \u0026#34;https://api.cloudflare.com/client/v4/zones/$zone_identifier/dns_records?name=$record_name\u0026#34; -H \u0026#34;X-Auth-Email: $auth_email\u0026#34; -H \u0026#34;X-Auth-Key: $auth_key\u0026#34; -H \u0026#34;Content-Type: application/json\u0026#34;` record_identifier=`echo $rec_response_json | grep -Po \u0026#39;(?\u0026lt;=\u0026#34;id\u0026#34;:\u0026#34;)[^\u0026#34;]*\u0026#39;` echo \u0026#34;$zone_identifier\u0026#34; \u0026gt; $id_file echo \u0026#34;$record_identifier\u0026#34; \u0026gt;\u0026gt; $id_file fi } #Update DNS record update_dns() { update=$(curl -s -X PUT \u0026#34;https://api.cloudflare.com/client/v4/zones/$zone_identifier/dns_records/$record_identifier\u0026#34; -H \u0026#34;X-Auth-Email: $auth_email\u0026#34; -H \u0026#34;X-Auth-Key: $auth_key\u0026#34; -H \u0026#34;Content-Type: application/json\u0026#34; --data \u0026#34;{\\\u0026#34;id\\\u0026#34;:\\\u0026#34;$zone_identifier\\\u0026#34;,\\\u0026#34;type\\\u0026#34;:\\\u0026#34;$record_type\\\u0026#34;,\\\u0026#34;name\\\u0026#34;:\\\u0026#34;$record_name\\\u0026#34;,\\\u0026#34;content\\\u0026#34;:\\\u0026#34;$ip\\\u0026#34;}\u0026#34;) } ################### Main ################### log \u0026#34;Script start.\u0026#34; #Got IP Address get_ip # Check got the right ip address if [ \u0026#34;$ip\u0026#34; == \u0026#34;\u0026#34; ]; then echo \u0026#34;Can not get IP address.Please check your network connection.\u0026#34; log \u0026#34;Can not get IP address.Please check your network connection.\u0026#34; exit 0 fi # Check IP changed or not check_ip_change # Get zone_id and sumdomain record ID get_id # Check get ID successfully or not if [ \u0026#34;$zone_identifier\u0026#34; == \u0026#34;\u0026#34; ]; then echo \u0026#34;Can not get zone_id.\u0026#34; log \u0026#34;Can not get zone_id.\u0026#34; exit 0 elif [ \u0026#34;$record_identifier\u0026#34; == \u0026#34;\u0026#34; ]; then echo \u0026#34;Can not get record_id.\u0026#34; log \u0026#34;Can not get record_id.\u0026#34; exit 0 fi # Update DNS Record update_dns # Check DNS record updated or not if [[ $update == *\u0026#34;\\\u0026#34;success\\\u0026#34;:false\u0026#34;* ]]; then log \u0026#34;API UPDATE FAILED. DUMPING RESULTS:\\n$update\u0026#34; echo -e \u0026#34;API UPDATE FAILED. DUMPING RESULTS:\\n$update\u0026#34; exit 0 else echo \u0026#34;$ip\u0026#34; \u0026gt; $ip_file log \u0026#34;$record_name IP changed to: $ip\u0026#34; echo \u0026#34;$record_name IP changed to: $ip\u0026#34; fi How to run the script 1 2 3 4 5 #update A record sudo bash /config/scripts/ddns/cloudflare-ddns.sh ipv4 \u0026lt;MY_DOMAIN_NAME\u0026gt; #update AAAA record sudo bash /config/scripts/ddns/cloudflare-ddns.sh ipv6 \u0026lt;MY_DOMAIN_NAME\u0026gt; ","date":"2022-10-09T09:50:14+08:00","image":"https://picsum.photos/800/600.webp?random=7257319e","permalink":"https://echowings.github.io/zh-cn/p/shell-script-to-update-cloudflare-ddns/","title":"Shell Script to Update Cloudflare Ddns"},{"content":"如何在VyOS上启用api服务 最近，我写了些shell脚本来自动探测网络状态，并通过脚本来更改vyos的设置，但是如果意外断电或者强制重启会导致VyOS的配置文件丢失，非常的麻烦和不稳定。 如何解决这个问题呢？为什么不实施VyOS的API呢？\n在VyOS本机上启用api服务 socket模式启用api服务 1 set service https api socket curl测试 1 curl --unix-socket /run/api.sock -X POST -Fkey=qwerty -Fdata=\u0026#39;{\u0026#34;op\u0026#34;: \u0026#34;showConfig\u0026#34;, \u0026#34;path\u0026#34;: []}\u0026#39; http://localhost/retrieve 使用let‘s encryption的ssl启动VyOS API 服务 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 #!/bin/vbash source /opt/vyatta/etc/functions/script-template configure # 定义变量 ID=\u0026#34;my_id\u0026#34; APIKEY=\u0026#34;12345\u0026#34; APIPORT=\u0026#34;1234\u0026#34; VHOST=\u0026#34;myvps\u0026#34; FULL_FQDN=\u0026#34;xxx.xxx.xxx\u0026#34; LISTEN_ADDRESS=\u0026#34;xxx.xxx.xxx.xxx\u0026#34; EMAIL=\u0026#34;my@emal.com\u0026#34; set service https api key id $ID key $APIKEY set service https certificates certbot domain-name $FULL_FQDN set service https certificates certbot email $EMAIL set service https api strict set service https virtual-host $VHOST listen-address $LISTEN_ADDRESS set service https virtual-host $VHOST listen-port $APIPORT set service https virtual-host $VHOST server-name $FULL_FQDN commit save exit ","date":"2022-04-26T00:17:15+08:00","image":"https://picsum.photos/800/600.webp?random=71ff97d5","permalink":"https://echowings.github.io/zh-cn/p/how-to-enable-http-api-service-on-vyos/","title":"如何在vyos上启用api服务"},{"content":"奥林岛财务软件在win7/win8/win10安装 安装32bit的Office Office 2007. office 2013、office 2016,office2 019的32bit版本皆可！不可装64bit版本office.\n下载注册Vsflex6.ocx 下载vsflex6.ocx 下载链接(下载任意一个即可) (1). Vsflex6.zip\n(2). Vsflex6.zip\n解压出来的文件Vsflex6.ocx，复制粘贴到c:/windows/system32/目录。\n管理员权限打开CMD.在如下图所示图标右键。在“CommandPrompt“点击右键。然后在弹出的菜单 ”Run as Administror”，单击打开。 如下图 复制粘贴并在打开管理员权限cmd里运行这个命令即可完成Vsflex6.ocx的注册.\n1 regsvr32 c:\\windows\\system32\\Vsflex6.ocx \u0026ndash;THE END\u0026ndash;\n","date":"2021-02-05T11:27:59+08:00","image":"https://echowings.github.io/zh-cn/p/post/2016-09-14_101553_hu7810971e8a628346888e63335bad77f5_88259_120x120_fill_q75_box_smart1.jpg","permalink":"https://echowings.github.io/zh-cn/p/post/","title":"奥林岛财务软件在win7/win8/win10安装"}]